name: CI

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Python deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
      - name: Install & Lint
        run: |
          pip install --upgrade pip
          pip install black flake8
          black backend
          flake8 backend

  lint-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install & Lint
        working-directory: frontend
        run: |
          npm ci
          npm run lint

  test-backend:
    runs-on: ubuntu-latest
    needs: lint-python
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with: { python-version: '3.x' }
      - name: Install & Test
        run: |
          pip install -r backend/requirements.txt
          pytest --maxfail=1 --disable-warnings -q backend/tests

  test-frontend:
    runs-on: ubuntu-latest
    needs: lint-js
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: { node-version: '18' }
      - name: Install & Test
        working-directory: frontend
        run: |
          npm ci
          npm test -- --watchAll=false --coverage

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [ test-backend, test-frontend ]
    outputs:
      image-backend: ${{ steps.build-backend.outputs.image }}
      image-frontend: ${{ steps.build-frontend.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        id: build-backend
        uses: docker/build-push-action@v4
        with:
          context: backend
          file: backend/Dockerfile
          push: false
          outputs: type=registry
          tags: registry.example.com/app/backend:${{ github.sha }}

      - name: Build Frontend Image
        id: build-frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: frontend/Dockerfile
          push: false
          outputs: type=registry
          tags: registry.example.com/app/frontend:${{ github.sha }}

      - name: Upload images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            # (if youâ€™re exporting .tar files, list them here)
            # or skip if you push directly to your registry above
