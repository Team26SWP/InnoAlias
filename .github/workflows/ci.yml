name: CI

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - '.github/workflows/ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint-python:
    name: üêç Lint Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Install Black & Flake8 & mypy
        run: |
          pip install --upgrade pip
          pip install black flake8

      - name: Check formatting & lint
        run: |
          black --check backend
          flake8 backend

  typechecker-python:
    name: üêç Type checking for Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Install Black & Flake8 & mypy
        run: |
          pip install --upgrade pip
          pip install mypy

      - name: Check formatting & lint
        run: |
          mypy backend

  lint-js:
    name: ‚öõÔ∏è Lint JavaScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install deps & run ESLint
        working-directory: frontend
        run: |
          npm ci --force
          npm run lint

  test-backend:
    name: üêç Test Python
    runs-on: ubuntu-latest
    needs: [ lint-python, typechecker-python ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install & run pytest
        run: |
          pip install -r backend/requirements.txt
          pytest --maxfail=1 --disable-warnings -q backend/tests

  test-frontend:
    name: ‚öõÔ∏è Test JavaScript
    runs-on: ubuntu-latest
    needs: lint-js
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps & run vitest
        working-directory: frontend
        run: |
          npm ci --force
          npm run test -- --run

  build-and-push-images:
    name: üî® Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [ test-backend, test-frontend ]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push backend image
        id: build-backend
        uses: docker/build-push-action@v4
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-backend:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-backend:latest

      - name: Build & push frontend image
        id: build-frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-frontend:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-frontend:latest

      - name: Build & push nginx image
        id: build-nginx
        uses: docker/build-push-action@v4
        with:
          context: nginx
          file: nginx/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-nginx:${{ github.sha }}
            docker.io/${{ secrets.DOCKERHUB_USER }}/innoalias-nginx:latest
